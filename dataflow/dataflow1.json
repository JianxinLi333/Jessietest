{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          enqueuedTime as string,",
				"          SCHEMA_MAPPER as string,",
				"          device as string,",
				"          deviceid as string,",
				"          deviceip as string,",
				"          gateway as string,",
				"          line as string,",
				"          msgtime as string,",
				"          msgtype as string,",
				"          msgversion as string,",
				"          plant as string,",
				"          technology as string,",
				"          Feeder as integer,",
				"          MACProcess as string,",
				"          MACReference as double,",
				"          {MAC current} as double,",
				"          Tool as integer,",
				"          area as string,",
				"          carbodyID as string,",
				"          cleanTime as integer,",
				"          dateTime as string,",
				"          deviceName as string,",
				"          dropTimeActual as double,",
				"          dropTimeMaximum as double,",
				"          dropTimeMinimum as double,",
				"          dropVoltage as integer,",
				"          facilityName as string,",
				"          installedLocation as string,",
				"          ip as string,",
				"          liftHeightActual as double,",
				"          liftheightMaximum as double,",
				"          liftheightMinimum as double,",
				"          liftheightReference as double,",
				"          location as string,",
				"          mainWeldcurrentVoltageActual as double,",
				"          mainWeldcurrentVoltageMaximum as integer,",
				"          mainWeldcurrentVoltageMinimum as integer,",
				"          mode as string,",
				"          oaip as string,",
				"          optimization as string,",
				"          outlet as integer,",
				"          outletWeldcounter as integer,",
				"          outletWeldcounterWOP as integer,",
				"          pLCNo as string,",
				"          peakVoltage as integer,",
				"          penetrationActual as double,",
				"          penetrationMaximum as double,",
				"          penetrationMinimum as double,",
				"          penetrationReference as double,",
				"          pilotWeldcurrentArcVoltageActual as double,",
				"          pilotWeldcurrentArcVoltageMaximum as integer,",
				"          pilotWeldcurrentArcVoltageMinimum as integer,",
				"          productStructure as string,",
				"          sourceId as string,",
				"          stickOutActual as double,",
				"          stickOutMaximum as double,",
				"          stickOutMinimum as double,",
				"          studId as string,",
				"          systemWeldcounter as integer,",
				"          time as string,",
				"          toolType as string,",
				"          toolWeldcounter as integer,",
				"          type as string,",
				"          weldEnergyActual as integer,",
				"          weldEnergyMaximum as string,",
				"          weldEnergyMinimum as string,",
				"          weldMode as string,",
				"          weldcurrentActual as integer,",
				"          weldcurrentReference as integer,",
				"          weldtimeActual as double,",
				"          weldtimeMaximum as integer,",
				"          weldtimeMinimum as integer,",
				"          weldtimeReference as integer,",
				"          MACcurrent as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          json as string,",
				"          desc_1 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}